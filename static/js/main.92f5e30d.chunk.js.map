{"version":3,"sources":["Components/Todo/Todo.module.css","Components/Counter/Button/ButtonNya.module.css","Components/Counter/Input/InputNya.module.css","Components/Dialog.tsx","Components/Todo/Todo.tsx","Components/Counter/Span/Span.tsx","Components/Counter/Button/ButtonNya.tsx","Components/Counter/Input/InputNya.tsx","Components/Counter/Counter.tsx","Components/Junior+/Junior+.tsx","Components/Junior/Junior.tsx","Components/PreJunior/PreJunior.tsx","Components/NavBar/NavBar.tsx","App.tsx","serviceWorker.ts","index.tsx","Components/PreJunior/PreJunior.module.css"],"names":["module","exports","Dialog","className","src","alt","map","i","Todo","useState","id","n","p","todo","setTodo","s","container","t","key","onClick","filteredTask","filter","deleteTask","Span","props","names","name","v1","length","ButtonNya","buttonNya","InputNya","onEnter","error","restProps","inputNya","onKeyPress","e","charCode","type","Counter","JuniorPlus","item","Junior","PreJunior","NavBar","role","to","App","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.92f5e30d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Todo_container__o74FW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonNya\":\"ButtonNya_buttonNya__2H2sM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputNya\":\"InputNya_inputNya__1FUxv\"};","import React from 'react';\n\nconst Dialog = () => {\n    let myQualities: Array<string> = ['sportsman', 'foodLover', 'animalLover']\n\n    return (\n        <div className={'wrapper'}>\n            <div className={'messageBlock'}>\n                <img className={'photo'}\n                     src=\"https://www.publicdomainpictures.net/pictures/270000/velka/avatar-people-person-business-.jpg\"\n                     alt=\"photo\"/>\n                <div className={`messageBody`}>\n                    <h1 className={'title'}>Andrei</h1>\n\n                    {\n                        myQualities.map(i => <span className={i === 'foodLover' ? 'subTitleFoodLover':'subTitle'} >{i}</span>)\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Dialog","import React, {useState} from \"react\";\nimport s from '../Todo/Todo.module.css'\n\nfunction Todo() {\n    let [todo, setTodo] = useState(\n        [\n            {id: 1, n: \"work\", p: \"hight\"}, {id: 2, n: \"anime\", p: \"low\"}, {id: 3, n: \"games\", p: \"middle\"},\n            {id: 4, n: \"react\", p: \"hight\"},\n            {id: 5, n: \"html\", p: \"low\"}\n        ]\n    )\n\n    const deleteTask = (id:number) => {\n        let filteredTask = todo.filter(t => t.id !== id)\n        setTodo(filteredTask)\n    }\n    return (\n        <div className={s.container}>\n            <ul>\n                {todo.map(t => {\n                    if (t.p === \"hight\") {\n                        return <li key={t.id}>\n                            {t.n}\n                            <span>{t.p}</span>\n                            <button onClick={() => {deleteTask(t.id)}}>x</button>\n                        </li>\n                    }\n\n\n                })}\n            </ul>\n        </div>\n    )\n}\n\nexport default Todo","import React, {createRef, useState, ChangeEvent} from 'react';\nimport { v1 } from 'uuid';\n\ntype PropsType = {\n\n}\n\nconst Span = (props:PropsType) => {\n    let names = [{name: 'Andrei', id: v1()},{name: 'Andrei', id: v1()}]\n    return (\n        <div>\n            <span className={'counterSpan'} >{names.length}</span>\n        </div>\n    )\n}\n\nexport default Span","import React, { DetailedHTMLProps, ButtonHTMLAttributes } from \"react\";\nimport s from '../Button/ButtonNya.module.css'\nexport type ButtonNyaPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\n\nfunction ButtonNya (props: ButtonNyaPropsType) {\n\n    return <button className={s.buttonNya} {...props}/>\n}\n\nexport default ButtonNya","import React, {createRef, useState, ChangeEvent, InputHTMLAttributes, DetailedHTMLProps} from 'react';\nimport s from '../Input/InputNya.module.css'\n\nexport type InputNyaPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n    & { onEnter?: () => void, error?: string };\n\nfunction InputNya(props: InputNyaPropsType) {\n    const {onEnter, error, ...restProps} = props;\n\n    const onKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.charCode = 13) onEnter && onEnter();\n    }\n\n    return (\n        <>\n            <input className={s.inputNya} onKeyPress={onKeyPress}  {...restProps} type=\"text\"/>\n            {error ? <span>{error}</span> : null}\n        </>\n    );\n};\n\nexport default InputNya","import React, {createRef, useState, ChangeEvent} from 'react';\nimport Span from './Span/Span';\nimport ButtonNya from './Button/ButtonNya';\nimport InputNya from './Input/InputNya';\n\nconst Counter = () => {\n\n    let [value, setValue] = useState('')\n\n    // let [count, setCount] = useState(0)\n    //\n    // const counter = () => {\n    //     setCount(count + 1)\n    // }\n\n    const onClickHandler = (e:any) => {\n        if (value != '') {\n            alert(value)\n            setValue(value = '')\n        }\n\n    }\n    const onKeyPressHandler = (e:any) => {\n    if (e.charCode === 13 && value != '')  {\n        alert(value)\n    }\n    }\n    const onTextChange = (e:any) => {\n        setValue(e.target.value)\n    }\n\n    return (\n        <div className={'counterWrapper'}>\n            <Span/>\n            <InputNya />\n            <ButtonNya\n            />\n        </div>\n    )\n}\n\nexport default Counter","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport s from '../PreJunior/PreJunior.module.css'\n\nfunction JuniorPlus() {\n    return (\n        <div className={s.item}>\n            <span>3333</span>\n        </div>\n    )\n}\n\nexport default JuniorPlus","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport s from '../PreJunior/PreJunior.module.css'\n\nfunction Junior() {\n    return (\n        <div className={s.item}>\n            <span>2222</span>\n        </div>\n    )\n}\n\nexport default Junior","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport s from '../PreJunior/PreJunior.module.css'\n\nfunction PreJunior() {\nreturn (\n    <div className={s.item}>\n        <span>11111</span>\n    </div>\n)\n}\n\nexport default PreJunior","import React from \"react\";\nimport {NavLink} from \"react-router-dom\";\n\nfunction NavBar() {\n    return (\n        <div>\n            <nav role='navigation'>\n                <div id=\"menuToggle\">\n\n                    <input type=\"checkbox\" />\n\n                    <span></span>\n                    <span></span>\n                    <span></span>\n\n                    <ul id=\"menu\">\n                        <li><NavLink to='/PreJunior' >PreJunior</NavLink></li>\n                        <li><NavLink to='/Junior' > Junior</NavLink></li>\n                            <li><NavLink to='/Junior+' > Junior+</NavLink></li>\n                    </ul>\n                </div>\n            </nav>\n\n        </div>\n    )\n}\n\nexport default NavBar\n","import React from 'react';\nimport './App.css';\nimport Dialog from './Components/Dialog';\nimport Todo from './Components/Todo/Todo';\nimport Counter from \"./Components/Counter/Counter\";\nimport {HashRouter, Route} from \"react-router-dom\";\nimport JuniorPlus from \"./Components/Junior+/Junior+\";\nimport Junior from './Components/Junior/Junior';\nimport PreJunior from \"./Components/PreJunior/PreJunior\";\nimport NavBar from './Components/NavBar/NavBar';\n\n\nfunction App() {\n    return (\n        <HashRouter>\n            <div className=\"App\">\n                <NavBar />\n                <Route path=\"/PreJunior\" render={() => <PreJunior/>}/>\n                <Route path=\"/Junior\" render={() => <Junior/>}/>\n                <Route path=\"/Junior+\" render={() => <JuniorPlus/>}/>\n                <Dialog/>\n                <Todo/>\n                <Counter/>\n            </div>\n        </HashRouter>\n    );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"activeLink\":\"PreJunior_activeLink__KzkKH\"};"],"sourceRoot":""}